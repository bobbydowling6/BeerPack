@model BeerPack.Models.SalesReportModel
@{
    ViewBag.Title = "Index";
    Layout = "/Views/Shared/_Layout.cshtml";
}
<h1 style="color: white">This is a report page</h1>
@using (Html.BeginForm())
{
    <input type="submit" value="Get Report" />
    @Html.DropDownListFor(m => m.SelectedState, Model.States.Select(x => new SelectListItem { Value = x, Text = x }))
    {


        {
        <div class="row">
            <div class="col-xs-6">
                <table class="table table-striped" style="background-color: white">

                    <thead>
                        <tr>
                            <th>Product ID</th>
                            <th>Name</th>
                            <th>Quantity</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var topSale in Model.TopSalesByQuantity)
                        {
                            <tr>
                                <td>@topSale.ProductID</td>
                                <td>@topSale.ProductName</td>
                                <td>@topSale.TotalQuantity</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                    <div class="col-xs-6">
                        <div id="quantityChart"></div>
                    </div>
                </div>
            </div>
        }
    }
        @section Scripts{
        <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
        <script type="text/javascript">

        var productQuantity = [
            @Html.Raw(String.Join(",", Model.TopSalesByQuantity.Select(x => string.Format("[\"{0}\", {1}]", x.ProductName, x.TotalQuantity))))
        ];

        // Load the Visualization API and the corechart package.
        google.charts.load('current', { 'packages': ['corechart'] });

        // Set a callback to run when the Google Visualization API is loaded.
        google.charts.setOnLoadCallback(drawChart);

        // Callback that creates and populates a data table,
        // instantiates the pie chart, passes in the data and
        // draws it.
        function drawChart() {

            // Create the data table.
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Name');
            data.addColumn('number', 'Quantity');
            data.addRows(productQuantity);

            // Set chart options
            var options = {
                'title': 'Top Sales By Quantity',

            };

            // Instantiate and draw our chart, passing in some options.
            var chart = new google.visualization.PieChart(document.getElementById('quantityChart'));
            chart.draw(data, options);
        }
</script>
    }
}